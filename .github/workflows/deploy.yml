name: Despliegue SNS-SQS-Lambda

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'LICENSE'
      - 'README.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'LICENSE'
      - 'README.md'

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SNS_TOPIC_NAME: ${{ secrets.SNS_TOPIC_NAME }}
  SQS_QUEUE_NAME: ${{ secrets.SQS_QUEUE_NAME }}
  LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
  LAMBDA_ROLE_NAME: ${{ secrets.LAMBDA_ROLE_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create SNS Topic
        id: create-sns
        run: |
          SNS_ARN=$(aws sns create-topic --name ${{ env.SNS_TOPIC_NAME }} --query 'TopicArn' --output text)
          echo "SNS_ARN=${SNS_ARN}" >> $GITHUB_ENV

      - name: Create SQS Queue
        id: create-sqs
        run: |
          QUEUE_URL=$(aws sqs create-queue --queue-name ${{ env.SQS_QUEUE_NAME }} --query 'QueueUrl' --output text)
          QUEUE_ARN=$(aws sqs get-queue-attributes --queue-url $QUEUE_URL --attribute-names QueueArn --query 'Attributes.QueueArn' --output text)
          echo "QUEUE_URL=${QUEUE_URL}" >> $GITHUB_ENV
          echo "QUEUE_ARN=${QUEUE_ARN}" >> $GITHUB_ENV

      - name: Update SQS Policy
        run: |
          POLICY=$(cat json/sqs_policy.json | \
            sed "s|\${QUEUE_ARN}|$QUEUE_ARN|g" | \
            sed "s|\${SNS_ARN}|$SNS_ARN|g")
          aws sqs set-queue-attributes \
            --queue-url $QUEUE_URL \
            --attributes "Policy=${POLICY}"

      - name: Subscribe SQS to SNS
        run: |
          aws sns subscribe \
            --topic-arn $SNS_ARN \
            --protocol sqs \
            --notification-endpoint $QUEUE_ARN

      - name: Create Lambda Role
        run: |
          POLICY=$(cat json/lambda_trust_policy.json)
          aws iam create-role \
            --role-name ${{ env.LAMBDA_ROLE_NAME }} \
            --assume-role-policy-document "$POLICY" || true

      - name: Attach Lambda Policies
        run: |
          aws iam attach-role-policy \
            --role-name ${{ env.LAMBDA_ROLE_NAME }} \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole || true
          
          aws iam attach-role-policy \
            --role-name ${{ env.LAMBDA_ROLE_NAME }} \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true

      - name: Configure SNS Policy for Lambda
        run: |
          POLICY=$(cat json/sns_policy.json | sed "s|\${SNS_ARN}|$SNS_ARN|g")
          aws iam put-role-policy \
            --role-name ${{ env.LAMBDA_ROLE_NAME }} \
            --policy-name sns-publish \
            --policy-document "$POLICY"

      - name: Package Lambda
        run: |
          zip function.zip lambda_function.py

      - name: Deploy Lambda
        run: |
          ROLE_ARN=$(aws iam get-role --role-name ${{ env.LAMBDA_ROLE_NAME }} --query 'Role.Arn' --output text)
          echo "ROLE_ARN=${ROLE_ARN}" >> $GITHUB_ENV
          aws lambda create-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --runtime python3.9 \
            --role $ROLE_ARN \
            --handler lambda_function.lambda_handler \
            --zip-file fileb://function.zip \
            --environment "Variables={SNS_TOPIC_ARN=$SNS_ARN}" || \
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://function.zip

      - name: Create Lambda SQS trigger
        run: |
          aws lambda create-event-source-mapping \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --event-source-arn $QUEUE_ARN \
            --batch-size 1 || true
